<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:ippui="http://infinity.com/bpm/ui/common/uiDefinition" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/jee     
        http://www.springframework.org/schema/jee/spring-jee-3.0.xsd"
	default-autowire="byName">

	<context:annotation-config />
	<!-- 用注解来实现事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<!-- 缺省使用c3p0,是否使用druid,待测试 -->
			<ref bean="dataSource_c3p0" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${ngbf.ds.dialet}</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- after_statement／after_transaction／on_close -->
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.kingstar.ngbf.s.*.bean</value>	
				<value>com.kingstar.ngbf.c.*.bean</value>
				<value>com.kingstar.*.bs.**.bean</value>
				<value>com.kingstar.*.bc.*.bean</value>
			</list>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<!-- 	JNDI数据源       -->
	<!--<jee:jndi-lookup id="dataSource_jndi" jndi-name="jdbcDataSource" resource-ref="true"/> -->
	
	<!-- 	C3P0数据源       -->
	<bean id="dataSource_c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${ngbf.ds.driver}" />
		<property name="jdbcUrl" value="${ngbf.ds.url}" />
		<property name="user" value="${ngbf.ds.username}" />
		<property name="password" value="${ngbf.ds.password}" />
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${ngbf.ds.pool.initial}" />
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="${ngbf.ds.pool.min}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${ngbf.ds.pool.max}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${ngbf.ds.pool.increment}" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="30" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="2000" />
		<!--连接关闭时默认将所有未提交的操作回滚。Default: false -->
		<property name="autoCommitOnClose" value="false" />
		<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如定义此参数,属性preferredTestQuery将被忽略。 -->
		<!--<property name="automaticTestTable" value="T_POOL_TEST" /> -->
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="false" />
		<!--连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时抛出 SQLException,如设为0则无限期等待(毫秒) -->
		<property name="checkoutTimeout" value="5000" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
		<property name="testConnectionOnCheckin" value="false" />
	</bean>
	
	<!-- 	druid数据源       -->
	<bean id="dataSource_druid" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${ngbf.ds.url}" />
		<property name="username" value="${ngbf.ds.username}" />
		<property name="password" value="${ngbf.ds.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${ngbf.ds.pool.min}" />
		<property name="minIdle" value="20" /> 
		<property name="maxActive" value="${ngbf.ds.pool.max}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
	
</beans>